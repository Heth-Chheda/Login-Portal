name: Deploy LoginPortal

on:
  push:
    tags:
      - "v*-dev-deploy"
      - "v*-qa-deploy"
      - "v*-stage-deploy"
      - "v*-prod-deploy"
  workflow_dispatch:
    inputs:
      deploy_version:
        type: string
        description: Version to deploy in format vX.Y.Z
      deploy_environment:
        type: choice
        description: Deploy Environment
        options:
          - dev
          - qa
          - stage
          - prod

jobs:
  tagify:
    name: Get Tag
    runs-on: ubuntu-latest
    outputs:
      the_tag: ${{ steps.deploy_tag.outputs.TAG_NAME }}
    steps:
      - name: Get Deploy Tag
        if: ${{ github.event_name == 'push' }}
        run: |
          full_tag=${GITHUB_REF#refs/*/}
          deploy_tag=${full_tag: 0:-7}
          echo "VERSION=${deploy_tag}" >> "$GITHUB_ENV" 
      - name: Manual Input
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          echo "VERSION=${{ github.event.inputs.deploy_version }}-${{ github.event.inputs.deploy_environment }}" >> "$GITHUB_ENV" 
      - name: Output VAR
        id: deploy_tag
        run: |
          echo "TAG_NAME=${{ env.VERSION }}" >> $GITHUB_OUTPUT

  build_and_push:
    needs: [tagify]
    runs-on: ubuntu-latest
    env:
      TAG_VERSION: ${{ needs.tagify.outputs.the_tag }}
      REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
    steps:
      - uses: actions/checkout@v3
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          aws-region: ${{ secrets.AWS_ECR_REGION }}

      - name: Build and Push Backend Image
        run: |
          docker build -t login-portal-api-image:${{ env.TAG_VERSION }} -f ./LoginPortal/Dockerfile ./LoginPortal
          docker tag login-portal-api-image:${{ env.TAG_VERSION }} ${{ env.REGISTRY }}/login-portal-api-image:${{ env.TAG_VERSION }}
          docker push ${{ env.REGISTRY }}/login-portal-api-image:${{ env.TAG_VERSION }}

      - name: Build and Push Frontend Image
        run: |
          docker build -t login-portal-app-image:${{ env.TAG_VERSION }} -f ./LoginPortalApp/Dockerfile ./LoginPortalApp
          docker tag login-portal-app-image:${{ env.TAG_VERSION }} ${{ env.REGISTRY }}/login-portal-app-image:${{ env.TAG_VERSION }}
          docker push ${{ env.REGISTRY }}/login-portal-app-image:${{ env.TAG_VERSION }}

  retag_image:
    needs: [build_and_push]
    runs-on: ubuntu-latest
    if: ${{ endsWith(needs.tagify.outputs.the_tag, 'stage') || endsWith(needs.tagify.outputs.the_tag, 'prod') }}
    env:
      TAG_VERSION: ${{ needs.tagify.outputs.the_tag }}
      REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
    steps:
      - uses: actions/checkout@v3
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Retag and Push Docker Images
        run: |
          COMPONENTS=("login-portal-api-image" "login-portal-app-image")
          for COMPONENT in "${COMPONENTS[@]}"; do
            FULL_TAG=$REGISTRY/$COMPONENT:${{ env.TAG_VERSION }}
            LATEST_TAG=$REGISTRY/$COMPONENT:latest
            docker pull $FULL_TAG
            docker tag $FULL_TAG $LATEST_TAG
            docker push $LATEST_TAG
          done

  deploy_dev:
    needs: [tagify]
    runs-on: ubuntu-latest
    if: ${{ endsWith(needs.tagify.outputs.the_tag, 'dev') }}
    env:
      TAG_VERSION: ${{ needs.tagify.outputs.the_tag }}
      REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
    steps:
      - uses: actions/checkout@v3
      - name: Set permissions for private key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > RportingKeyPair.pem
          chmod 600 RportingKeyPair.pem
      - name: Deploy to Dev Server
        run: |
          ssh -v -o StrictHostKeyChecking=no -i RportingKeyPair.pem ec2-user@${{ secrets.EC2_DEV_IP }} '
            sudo docker pull ${{ env.REGISTRY }}/login-portal-api-image:${{ env.TAG_VERSION }}
            sudo docker pull ${{ env.REGISTRY }}/login-portal-app-image:${{ env.TAG_VERSION }}

            sudo docker stop loginportal_dev || true
            sudo docker rm loginportal_dev || true

            sudo docker-compose -f /path/to/docker-compose.yml up -d
          '

  deploy_qa:
    needs: [tagify]
    runs-on: ubuntu-latest
    if: ${{ endsWith(needs.tagify.outputs.the_tag, 'qa') }}
    env:
      TAG_VERSION: ${{ needs.tagify.outputs.the_tag }}
      REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
    steps:
      - uses: actions/checkout@v3
      - name: Set permissions for private key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > RportingKeyPair.pem
          chmod 600 RportingKeyPair.pem
      - name: Deploy to QA Server
        run: |
          ssh -v -o StrictHostKeyChecking=no -i RportingKeyPair.pem ec2-user@${{ secrets.EC2_QA_IP }} '
            sudo docker pull ${{ env.REGISTRY }}/login-portal-api-image:${{ env.TAG_VERSION }}
            sudo docker pull ${{ env.REGISTRY }}/login-portal-app-image:${{ env.TAG_VERSION }}

            sudo docker stop loginportal_qa || true
            sudo docker rm loginportal_qa || true

            sudo docker-compose -f /path/to/docker-compose.yml up -d
          '
