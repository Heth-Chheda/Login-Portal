name: Deploy LoginPortal

on:
  push:
    tags:
      - "v*-dev-deploy"
      - "v*-qa-deploy"
      - "v*-stage-deploy"
      - "v*-prod-deploy"
  workflow_dispatch:
    inputs:
      deploy_version:
        type: string
        description: Version to deploy in format vX.Y.Z
      deploy_environment:
        type: choice
        description: Deploy Environment
        options:
          - dev
          - qa
          - stage
          - prod

jobs:
  tagify:
    name: Get Tag
    runs-on: ubuntu-latest
    outputs:
      the_tag: ${{ steps.deploy_tag.outputs.TAG_NAME }}
    steps:
      - name: Get Deploy Tag (push event)
        if: ${{ github.event_name == 'push' }}
        run: |
          full_tag=${GITHUB_REF#refs/*/}
          deploy_tag=${full_tag: 0:-7}
          echo "VERSION=${deploy_tag}" >> "$GITHUB_ENV"
      - name: Get Deploy Tag (manual input)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          echo "VERSION=${{ github.event.inputs.deploy_version }}-${{ github.event.inputs.deploy_environment }}" >> "$GITHUB_ENV"
      - name: Output Tag Variable
        id: deploy_tag
        run: |
          echo "TAG_NAME=${{ env.VERSION }}" >> $GITHUB_OUTPUT

  build_and_push:
    needs: [tagify]
    runs-on: ubuntu-latest
    env:
      TAG_VERSION: ${{ needs.tagify.outputs.the_tag }}
      REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_ECR_REGION }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Docker Compose (runner)
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_ECR_REGION }}
         
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_ECR_REGION }} | docker login --username AWS --password-stdin ${{ env.REGISTRY }}
          
      - name: Build and Push Docker Images
        run: |
          docker-compose build
          docker-compose push

  deploy_dev:
    needs: [build_and_push]
    runs-on: ubuntu-latest
    if: ${{ endsWith(needs.tagify.outputs.the_tag, 'dev') }}
    env:
      TAG_VERSION: ${{ needs.tagify.outputs.the_tag }}
      REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
      AWS_ECR_REGION: ${{ secrets.AWS_ECR_REGION }}
    steps:
      - name: Set permissions for private key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > KeyPair.pem
          chmod 600 KeyPair.pem
      
      - name: Copy docker-compose.yml to Dev Server
        run: |
          scp -o StrictHostKeyChecking=no -i KeyPair.pem docker-compose.yml ec2-user@${{ secrets.EC2_DEV_IP }}:/home/ec2-user/docker-compose.yml
      
      - name: Deploy to Dev Server
        run: |
          ssh -o StrictHostKeyChecking=no -i KeyPair.pem ec2-user@${{ secrets.EC2_DEV_IP }} "bash -s" <<'EOF'
if ! command -v docker-compose &>/dev/null; then
  echo "docker-compose not found. Installing..."
  sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose &&
  sudo chmod +x /usr/local/bin/docker-compose
fi
aws ecr get-login-password --region ${AWS_ECR_REGION} | docker login --username AWS --password-stdin ${REGISTRY}
docker-compose -f /home/ec2-user/docker-compose.yml pull
docker-compose -f /home/ec2-user/docker-compose.yml down
docker-compose -f /home/ec2-user/docker-compose.yml up -d
EOF

  deploy_qa:
    needs: [build_and_push]
    runs-on: ubuntu-latest
    if: ${{ endsWith(needs.tagify.outputs.the_tag, 'qa') }}
    env:
      TAG_VERSION: ${{ needs.tagify.outputs.the_tag }}
      REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
      AWS_ECR_REGION: ${{ secrets.AWS_ECR_REGION }}
    steps:
      - name: Set permissions for private key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > KeyPair.pem
          chmod 600 KeyPair.pem
      
      - name: Copy docker-compose.yml to QA Server
        run: |
          scp -o StrictHostKeyChecking=no -i KeyPair.pem docker-compose.yml ec2-user@${{ secrets.EC2_QA_IP }}:/home/ec2-user/docker-compose.yml
      
      - name: Deploy to QA Server
        run: |
          ssh -o StrictHostKeyChecking=no -i KeyPair.pem ec2-user@${{ secrets.EC2_QA_IP }} "bash -s" <<'EOF'
if ! command -v docker-compose &>/dev/null; then
  echo "docker-compose not found. Installing..."
  sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose &&
  sudo chmod +x /usr/local/bin/docker-compose
fi
aws ecr get-login-password --region ${AWS_ECR_REGION} | docker login --username AWS --password-stdin ${REGISTRY}
docker-compose -f /home/ec2-user/docker-compose.yml pull
docker-compose -f /home/ec2-user/docker-compose.yml down
docker-compose -f /home/ec2-user/docker-compose.yml up -d
EOF
