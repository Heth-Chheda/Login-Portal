name: Deploy LoginPortal

on:
  push:
    tags:
      - "v*-dev-deploy"
      - "v*-qa-deploy"
      - "v*-stage-deploy"
      - "v*-prod-deploy"
  workflow_dispatch:
    inputs:
      deploy_version:
        type: string
        description: Version to deploy in format vX.Y.Z
      deploy_environment:
        type: choice
        description: Deploy Environment
        options:
          - dev
          - qa
          - stage
          - prod

jobs:
  tagify:
    name: Get Tag
    runs-on: ubuntu-latest
    outputs:
      the_tag: ${{ steps.deploy_tag.outputs.TAG_NAME }}
    steps:
      - name: Get Deploy Tag
        if: ${{ github.event_name == 'push' }}
        run: |
          full_tag=${GITHUB_REF#refs/*/}
          deploy_tag=${full_tag: 0:-7}
          echo "VERSION=${deploy_tag}" >> "$GITHUB_ENV" 
      - name: Manual Input
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          echo "VERSION=${{ github.event.inputs.deploy_version }}-${{ github.event.inputs.deploy_environment }}" >> "$GITHUB_ENV" 
      - name: Output VAR
        id: deploy_tag
        run: |
          echo "TAG_NAME=${{ env.VERSION }}" >> $GITHUB_OUTPUT

  build_and_push:
    needs: [tagify]
    runs-on: ubuntu-latest
    env:
      TAG_VERSION: ${{ needs.tagify.outputs.the_tag }}
      REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_ECR_REGION }}
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_ECR_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Images with Docker Compose
        run: |
          docker-compose build
          docker-compose push

  deploy_dev:
    needs: [build_and_push]
    runs-on: ubuntu-latest
    if: ${{ endsWith(needs.tagify.outputs.the_tag, 'dev') }}
    env:
      TAG_VERSION: ${{ needs.tagify.outputs.the_tag }}
      REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
    steps:
      - name: Set permissions for private key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > KeyPair.pem
          chmod 600 KeyPair.pem
      - name: Deploy to Dev Server
        run: |
          ssh -v -o StrictHostKeyChecking=no -i KeyPair.pem ec2-user@${{ secrets.EC2_DEV_IP }} '
            aws ecr get-login-password --region ${{ secrets.AWS_ECR_REGION }} | docker login --username AWS --password-stdin ${{ env.REGISTRY }}
            docker-compose -f /home/ec2-user/docker-compose.yml pull
            docker-compose -f /home/ec2-user/docker-compose.yml down
            docker-compose -f /home/ec2-user/docker-compose.yml up -d
          '

  deploy_qa:
    needs: [build_and_push]
    runs-on: ubuntu-latest
    if: ${{ endsWith(needs.tagify.outputs.the_tag, 'qa') }}
    env:
      TAG_VERSION: ${{ needs.tagify.outputs.the_tag }}
      REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
    steps:
      - name: Set permissions for private key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > KeyPair.pem
          chmod 600 KeyPair.pem
      - name: Deploy to QA Server
        run: |
          ssh -v -o StrictHostKeyChecking=no -i KeyPair.pem ec2-user@${{ secrets.EC2_QA_IP }} '
            aws ecr get-login-password --region ${{ secrets.AWS_ECR_REGION }} | docker login --username AWS --password-stdin ${{ env.REGISTRY }}
            docker-compose -f /home/ec2-user/docker-compose.yml pull
            docker-compose -f /home/ec2-user/docker-compose.yml down
            docker-compose -f /home/ec2-user/docker-compose.yml up -d
          '
